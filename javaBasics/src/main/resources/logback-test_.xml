<?xml version="1.0" encoding="UTF-8"?>
<!--
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
新的logback没有[configuration][appender][encoding]层级
-->
<configuration debug="true" scan="false">

    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="LOG_HOME" value="D:/log"/>
    <!--读取配置文件-->
    <!--<property resource="properties/${spring.profiles.active:-local}/project.change.properties"/>-->
    <!--使用配置文件的key-->
    <!--<contextName>${project.id}</contextName>-->
    <!--获取时间戳字符串-->
    <timestamp key="bySecond" datePattern="yyyy-MM-dd HH:mm:ss" />


     <!--控制台输出,日志级别不同的颜色-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--<withJansi>true</withJansi>-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %highlight([%-5level] %logger{50} - %msg%n)</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 控制台输出 -->
    <!--<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">-->
        <!--&lt;!&ndash; 日志输出编码 &ndash;&gt;-->
        <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
            <!--&lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符&ndash;&gt;-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n-->
            <!--</pattern>-->
        <!--</layout>-->
    <!--</appender>-->

    <!--控制台日志，配置颜色-->
    <!--<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">-->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
            <!--<level>INFO</level>-->
        <!--</filter>-->
        <!--<withJansi>true</withJansi>-->
        <!--<encoder>-->
            <!--&lt;!&ndash;<pattern>%d %p (%file:%line\)- %m%n</pattern>&ndash;&gt;-->
            <!--&lt;!&ndash;格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符&ndash;&gt;-->
            <!--<pattern>%red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger) - %cyan(%msg%n)</pattern>-->
            <!--<charset>UTF-8</charset>-->
        <!--</encoder>-->
    <!--</appender>-->

    <!-- 按照每天生成日志文件 -->
    <appender name="FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/myApp.log.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志最多保存多少天-->
            <MaxHistory>7</MaxHistory>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </layout>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!--抽离Controller的日志-->
    <appender name="CONTROLLER"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/myApp_controller.log.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志最多保存多少天-->
            <MaxHistory>7</MaxHistory>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </layout>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!--
    用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，
    一个可选的level和一个可选的addtivity属性。
    name：用来指定受此loger约束的某一个包或者具体的某一个类。
    level：用来设置打印级别（日志级别）TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF
    additivity：是否向上级loger传递打印信息。默认是true。
        如果将additivity设置为true，日志打印了两次，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次。
    -->
    <logger name="controller.TestController" level="INFO" additivity="true">
        <appender-ref ref="CONTROLLER"/>
    </logger>

    <!--日志异步到数据库-->
    <!--<appender name="DB" class="ch.qos.logback.classic.db.DBAppender">-->
        <!--&lt;!&ndash;日志异步到数据库 &ndash;&gt;-->
        <!--<connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">-->
            <!--&lt;!&ndash;连接池 &ndash;&gt;-->
            <!--<dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
                <!--<driverClass>com.mysql.jdbc.Driver</driverClass>-->
                <!--<url>jdbc:mysql://127.0.0.1:3306/databaseName</url>-->
                <!--<user>root</user>-->
                <!--<password>root</password>-->
            <!--</dataSource>-->
        <!--</connectionSource>-->
    <!--</appender>-->


    <!--配置日志打印级别 dubug < info < warn < error-->
    <root level="dubug">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
    </root>

</configuration>